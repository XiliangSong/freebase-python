#summary So you want to do some logging with freebase-python?

= Introduction =

Logging is useful in changing the amount of information being outputted by the library. Sometimes you want to know absolutely every command being issued, sometimes you just want to write to a file the times when a query failed. Logging solves all these problems. Naturally, you can get familiar with all the logging options using the [http://docs.python.org/library/logging.html logging module's page]. But for a quick overview, this is the place to be.


= Logging to the Console =
{{{
import logging
import freebase

console = logging.StreamHandler()
console.setLevel(logging.DEBUG)

freebase.sandbox.log.setLevel(logging.DEBUG)
freebase.sandbox.log.addHandler(console)

result = freebase.sandbox.mqlread([dict(name=None, type='/type/type')])
}}}
We create a `console` object that outputs to the console. It has a debug level (`logging.DEBUG`). We also set the logging level for the 

== HTTPMetawebSession ==
As you have hopefully found out, both `freebase` and `freebase.sandbox` are wrappers for separate `HTTPMetawebSession`s. This example is very similar to the one before, but exposes the underlying `HTTPMetawebSession`.
{{{
import logging
from freebase.api import HTTPMetawebSession

mss = HTTPMetawebSession('sandbox.freebase.com')

console = logging.StreamHandler()
console.setLevel(logging.DEBUG)

mss.log.setLevel(logging.DEBUG)
mss.log.addHandler(console)

result = mss.mqlread([dict(name=None, type='/type/type')])
}}}

The console object allows you to print to the screen. You want to set the same level of logging (DEBUG, INFO, WARNING, ERROR and CRITICAL) for the console object and mss.log because I think what ends up getting printed is the higher level.

= Logging to a File =
{{{
import logging
from freebase.api import HTTPMetawebSession

mss = HTTPMetawebSession('sandbox.freebase.com')

console = logging.FileHandler("logger-frogger.txt")
console.setLevel(logging.DEBUG)

mss.log.setLevel(logging.DEBUG)
mss.log.addHandler(console)

n = mss.mqlread([dict(name=None, type='/type/type')])
}}}
You can also use a [http://docs.python.org/library/logging.html#rotatingfilehandler rotating file handler].