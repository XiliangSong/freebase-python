#labels Featured
freebase-python provides an easy way to acces [http://www.freebase.com/ freebase.com]'s API.

We'll be using one example query to demonstrate aspects of freebase-python.

{{{
query = {
    "name" : "The Beatles",
    "type" : "/music/artist",
    "album" : []
}
}}}

= A Simple Example =
Let's just make a simple read query for freebase:
{{{
import freebase
result = freebase.mqlread(query)
}}}

We could do the same for sandbox.freebase:
{{{
import freebase.sandbox
result = freebase.sandbox.mqlread(query)
}}}

For simplicity, you can call the class freebase and perform your operation. If you want to manage different connections with different settings, it is also possible to create HTTPMetawebSessions:
{{{
from freebase import HTTPMetawebSession
fms = HTTPMetawebSession("freebase.com")
sms = HTTPMetawebSession("sandbox.freebase.com")
result = fms.mqlread(query)
}}}
This would be useful if you wanted to be able to easily switch between using sandbox.freebase.com and freebase.com or if you wanted to create many sessions to execute in parallel.

= Base APIs =
A full list of the freebase apis is at the [http://www.freebase.com/view/freebase/metaweb_api_service metaweb_api_service page]. Most of them are supported here.

=== mqlread ===
{{{
r = freebase.mqlread(query, asof=None)
}}}
`mqlread` is used to read information from freebase. The query must be written in MQL. For more information on MQL, refer to the [http://mql.freebaseapps.com/ MQL and Freebase API reference guide]. You can also test your queries on the [http://www.freebase.com/app/queryeditor/ Query Editor], which can provide additional information on the query if you're stuck.

=== mqlwrite ===
{{{
r = freebase.mqlwrite(query)
}}}
`mqlread`'s sister, `mqlwrite` writes to freebase. It's especially important to consult the [http://mql.freebaseapps.com/ reference guide], because writes are even more complicated than reads.

=== login ===
{{{
freebase.login(username=andrew, password=secret)
}}}
=== logout ===
{{{
freebase.logout()
}}}
=== loggedin ===
{{{
amiloggedin = freebase.loggedin()
}}}
Returns a boolean indicating whether or not a user is logged in or not.
=== user_info ===
{{{
r = freebase.user_info()
}}}
Returns a typical dictionary response with information on the user.
=== version ===
{{{
r = freebase.version()
}}}
Not usually needed, but it returns the current version of each of freebase's major systems.

= Service APIs =
Service APIs don't work any differently than the base APIs. There are five categories: `trans`, `upload`, `search`, `geosearch`, and `touch`.

=== trans raw ===
{{{
r = freebase.raw(id)
}}}
Given the id of the _article_ of a topic, `raw` will return that blob of text or html. In order to get the guid of the article, you should execute something like this: 
{{{
{
    "id" : topicID,
    "article" : [{ "id" : null, "optional" : true, "limit" : 1 }]
}
}}}

=== trans blurb ===
{{{
r = freebase.blurb(id, break_paragraphs=False, maxlength=200)
}}}
The major difference between `blurb` and `raw` is that `blurb` only returns text (no html) and can only be done on certain objects (topics, articles, etc), while `raw` can return anything, but can't be called on topics. `maxlength` is the number of characters that should be displayed and must be larger than the sum of the number of characters in the first word plus 3 (for '...').

=== image_thumb ===
{{{
r = freebase.image_thumb(id, maxwidth=None, maxheight=None, mode="fit", onfail=None)
}}}
`image_thumb` returns an image scaled around according to the arguments passed to it. The exact way the arguments are detailed is located [http://www.freebase.com/view/en/api_trans_image_thumb here].

=== upload ===
{{{
r = freebase.upload(body, content_type, document_id=False, permission_of=False)
}}}
`upload` uploads your string `body` to freebase. The response tells you whether or not the upload was successful and the new id of the blob you uploaded. You can connect your newly uploaded blob to a document by using the document_id property.

=== uri_submit ===
{{{
r = freebase.uri_submit(URI, document_id=None, content_type=None)
}}}
Similar to `upload`, `uri_submit` takes the URI of the information you want to upload to freebase and uploads it. You can upload any type of document and can attach it to a real document with the use of the document_id property.