#summary How do you start using Freebase's python api?
#labels Featured

freebase-python provides an easy way to acces [http://www.freebase.com/ freebase.com]'s API.

We'll be using one example query to demonstrate aspects of freebase-python.

{{{
query = {
    "name" : "The Beatles",
    "type" : "/music/artist",
    "album" : []
}
}}}

= A Simple Example =
Let's just make a simple read query for freebase:
{{{
>>> import freebase
>>> result = freebase.mqlread(query)
>>> print result["album"]
[u'Please Please Me', u'From Me to You', u'Introducing... The Beatles', u'She Lo...
}}}

We could do the same for sandbox.freebase:
{{{
>>> import freebase.sandbox
>>> result = freebase.sandbox.mqlread(query)
}}}

For simplicity, you can call the class freebase and perform your operation. If you want to manage different connections with different settings, it is also possible to create HTTPMetawebSessions:
{{{
>>> from freebase import HTTPMetawebSession
>>> fms = HTTPMetawebSession("freebase.com")
>>> sms = HTTPMetawebSession("sandbox.freebase.com")
>>> result = fms.mqlread(query)
>>> fms is not sms
True
}}}
This would be useful if you wanted to be able to easily switch between using sandbox.freebase.com and freebase.com or if you wanted to create many sessions to execute in parallel.

= The API =
A full list of the freebase apis is at the [http://www.freebase.com/view/freebase/metaweb_api_service metaweb_api_service page]. Most of them are supported here.

=== [http://www.freebase.com/view/en/api_service_mqlread mqlread] ===
{{{
>>> r = freebase.mqlread(query, asof=None)
}}}
`mqlread` is used to read information from freebase. The query must be written in MQL. For more information on MQL, refer to the [http://mql.freebaseapps.com/ MQL and Freebase API reference guide]. You can also test your queries on the [http://www.freebase.com/app/queryeditor/ Query Editor], which can provide additional information on the query if you're stuck.

=== [http://www.freebase.com/view/en/api_service_mqlwrite mqlwrite] ===
{{{
>>> r = freebase.mqlwrite(query)
}}}
`mqlread`'s sister, `mqlwrite` writes to freebase. It's especially important to consult the [http://mql.freebaseapps.com/ reference guide], because writes are even more complicated than reads.

=== [http://www.freebase.com/view/en/api_account_login login] ===
{{{
>>> freebase.login(username=andrew, password=secret)
}}}
=== [http://www.freebase.com/view/en/api_account_logout logout] ===
{{{
>>> freebase.logout()
}}}
=== [http://www.freebase.com/view/guid/9202a8c04000641f800000000c36a842 user_info] ===
{{{
>>> freebase.login(username, password)
>>> print freebase.user_info()
{ 'status': '200 OK',
  'username': 'nitromaster101',
  'code': '/api/status/ok',
  'name': 'Andrew Rodriguez', 
  'guid': '#9202a8c04000641f80000000095397d1', 
  'id': '/user/nitromaster101', 
  'transaction_id': 'cache;...' }
>>> freebase.logout()
>>> print freebase.user_info()
Traceback (most recent call last):
...
MetawebError: request failed ...
}}}
Returns a typical dictionary response with information on the user.
=== [http://www.freebase.com/view/en/api_account_loggedin loggedin] ===
{{{
>>> freebase.logout()
>>> amiloggedin = freebase.loggedin()
>>> if amiloggedin:
        print freebase.user_info()
>>> else: print "User not logged in."
User not logged in.
}}}
Returns a boolean indicating whether or not a user is logged in or not.
=== [http://www.freebase.com/view/en/api_version version] ===
{{{
>>> print freebase.version()
{ u'me': u'me/dev/135/pyroot:76103', 
  u'index': u'relevance/dev/27:74629', 
  u'code': u'/api/status/ok', 
  u'cdb': u'cdb/dev/18:72726', 
  u'graph': u'gd/dev/50:76020', 
  u'server': u'www.freebase.com', 
  u'client': u'client/dev/93:76143', 
  u'status': u'200 OK', 
  u'transaction_id': u'cache;...' }
}}}
Not usually needed, but it returns the current version of each of freebase's major systems.
=== [http://www.freebase.com/view/en/api_status status] ===
{{{
>>> print freebase.status()
{ u'status': u'200 OK',
  u'code': u'/api/status/ok',
  u'graph': u'OK',
  u'blob': u'OK', 
  u'relevance': u'OK',
  u'transaction_id': u'cache;...' }
}}}
Hopefully there won't be a problem, but just in case you want to check, this is the current status of the freebase systems.

= Service APIs =
Service APIs don't work any differently than the base APIs. There are five categories: `trans`, `upload`, `search`, `geosearch`, and `touch`.

=== [http://www.freebase.com/view/en/api_trans_raw trans raw] ===
{{{
>>> r = freebase.raw(id)
}}}
Given the id of a document, `raw` will return that blob exactly as it is. Note you cannot ask for the raw of a topic because it is not a document. First, you have to isolate what document you want and then you can get its content.
{{{
>>> query = {
        "id" : "/en/the_beatles",
        "/common/topic/article" : [{"id" : None, "optional" : True, "limit" : 1}]
    }
>>> r = freebase.mqlread(query)
>>> article_id = r["/common/topic/article"][0]["id"]
>>> print freebase.raw(article_id)
The Beatles were a rock and pop band from Liverpool, England that formed in 1960...
}}}

You can actually do `raw` on any document content: an article, image, pdf, etc. For an image, you would do something like this:
{{{
>>> query = {
        "id" : "/en/the_beatles",
        "/common/article/image" : [{"id" : None, "optional" : True, "limit" : 1}]
>>> r = freebase.mqlread(query)
>>> image_id = r["/common/article/image"][0]["id"]
>>> im = freebase.raw(image_id) # Now you have the actual image.
}}}
The image's URL would be http://www.freebase.com/api/trans/raw/{image_id}.

=== trans blurb ===
{{{
r = freebase.blurb(id, break_paragraphs=False, maxlength=200)
}}}
The major difference between `blurb` and `raw` is that `blurb` only returns text (no html) and can only be done on certain objects (topics, articles, etc), while `raw` can return anything, but can't be called on topics. `maxlength` is the number of characters that should be displayed and must be larger than the sum of the number of characters in the first word plus 3 (for '...').

=== image_thumb ===
{{{
r = freebase.image_thumb(id, maxwidth=None, maxheight=None, mode="fit", onfail=None)
}}}
`image_thumb` returns an image scaled around according to the arguments passed to it. The exact way the arguments are detailed is located [http://www.freebase.com/view/en/api_trans_image_thumb here].

=== upload ===
{{{
r = freebase.upload(body, content_type, document_id=False, permission_of=False)
}}}
`upload` uploads your string `body` to freebase. The response tells you whether or not the upload was successful and the new id of the blob you uploaded. You can connect your newly uploaded blob to a document by using the document_id property.

=== uri_submit ===
{{{
r = freebase.uri_submit(URI, document_id=None, content_type=None)
}}}
Similar to `upload`, `uri_submit` takes the URI of the information you want to upload to freebase and uploads it. You can upload any type of document and can attach it to a real document with the use of the document_id property.